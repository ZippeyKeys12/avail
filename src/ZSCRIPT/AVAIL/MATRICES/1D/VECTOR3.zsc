class Av_Vector_V3{
    private
    uint __Length__;

    Array<double> Values;

    static
    Av_Vector_V3 Create(uint Length){
        Av_Vector_V3 Result=new('Av_Vector_V3');
        Result.__Length__=Length;
        for(int i=0; i<3*Length; i++)
            Result.Values.Push(0);
        return Result;
    }

    //////////
    // Info //
    //////////

    Vector3 Get(uint Index) const
    {return (Values[3*Index], Values[3*Index+1], Values[3*Index+2]);}

    uint Size() const
    {return __Length__;}

    Vector3 ASum() const{
        Vector3 Total=(0, 0, 0);
        for(int i=0; i<__Length__; i++)
            Total+=Get(i);
        return Total;
    }

    Vector3 AMin() const{
        Vector3 Min=Get(0);
        for(int i=1; i<__Length__; i++)
            if(Get(i).Length()<Min.Length())
                Min=Get(i);
        return Min;
    }

    Vector3 AMax() const{
        Vector3 Max=Get(0);
        for(int i=1; i<__Length__; i++)
            if(Max.Length()<Get(i).Length())
                Max=Get(i);
        return Max;
    }

    Vector3 ARange() const
    {return AMax()-AMin();}

    Vector3 AMean() const
    {return ASum()/__Length__;}

    ///////////////////
    // Manipulations //
    ///////////////////

    void Set(uint Index, Vector3 Value){
        Values[3*Index]  =Value.X;
        Values[3*Index+1]=Value.Y;
        Values[3*Index+2]=Value.Z;
    }

    virtual
    Av_Vector_V3 Map(Av_FBase Function) const{
        Av_Vector_V3 Result=Create(__Length__);
        for(int i=0; i<__Length__; i++)
            Result.Values[i]=Function.Apply(Values[i]);
        return Result;
    }

    void Zero(){
        for(int i=0; i<Values.Size(); i++)
            Values[i]=0;
    }

    /////////////////////
    // Transformations //
    /////////////////////

    Av_Vector ToV(){
        Av_Vector Result=Av_Vector.Create(__Length__);
        for(int i=0; i<__Length__; i++)
            Result.Values[i]=Get(i).Length();
        return Result;
    }

    Av_Vector_V3 Clone() const{
        Av_Vector_V3 Result=Create(__Length__);
        Result.Values.Copy(Values);
        return Result;
    }
}